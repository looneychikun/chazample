// Code generated by protoc-gen-go. DO NOT EDIT.
// source: chatpb/chatservice.proto

// Options for naming our generated packages

package chatpb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// ENUMS! Basically for gRPC default handling
// https://developers.google.com/protocol-buffers/docs/proto3#default
type STATUS int32

const (
	STATUS_STATUS_UNKNOWN STATUS = 0
	STATUS_STATUS_OK      STATUS = 1
	STATUS_STATUS_FAIL    STATUS = 2
)

var STATUS_name = map[int32]string{
	0: "STATUS_UNKNOWN",
	1: "STATUS_OK",
	2: "STATUS_FAIL",
}

var STATUS_value = map[string]int32{
	"STATUS_UNKNOWN": 0,
	"STATUS_OK":      1,
	"STATUS_FAIL":    2,
}

func (x STATUS) String() string {
	return proto.EnumName(STATUS_name, int32(x))
}

func (STATUS) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{0}
}

type LoginType int32

const (
	LoginType_LOGIN_UNKNOWN LoginType = 0
	LoginType_LOGIN         LoginType = 1
	LoginType_LOGOUT        LoginType = 2
)

var LoginType_name = map[int32]string{
	0: "LOGIN_UNKNOWN",
	1: "LOGIN",
	2: "LOGOUT",
}

var LoginType_value = map[string]int32{
	"LOGIN_UNKNOWN": 0,
	"LOGIN":         1,
	"LOGOUT":        2,
}

func (x LoginType) String() string {
	return proto.EnumName(LoginType_name, int32(x))
}

func (LoginType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{1}
}

// Standard protobuf messages for passing data
type User struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *User) Reset()         { *m = User{} }
func (m *User) String() string { return proto.CompactTextString(m) }
func (*User) ProtoMessage()    {}
func (*User) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{0}
}

func (m *User) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_User.Unmarshal(m, b)
}
func (m *User) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_User.Marshal(b, m, deterministic)
}
func (m *User) XXX_Merge(src proto.Message) {
	xxx_messageInfo_User.Merge(m, src)
}
func (m *User) XXX_Size() int {
	return xxx_messageInfo_User.Size(m)
}
func (m *User) XXX_DiscardUnknown() {
	xxx_messageInfo_User.DiscardUnknown(m)
}

var xxx_messageInfo_User proto.InternalMessageInfo

func (m *User) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

type ChatMessage struct {
	Timestamp            *timestamp.Timestamp `protobuf:"bytes,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	User                 *User                `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Text                 string               `protobuf:"bytes,3,opt,name=text,proto3" json:"text,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *ChatMessage) Reset()         { *m = ChatMessage{} }
func (m *ChatMessage) String() string { return proto.CompactTextString(m) }
func (*ChatMessage) ProtoMessage()    {}
func (*ChatMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{1}
}

func (m *ChatMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatMessage.Unmarshal(m, b)
}
func (m *ChatMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatMessage.Marshal(b, m, deterministic)
}
func (m *ChatMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatMessage.Merge(m, src)
}
func (m *ChatMessage) XXX_Size() int {
	return xxx_messageInfo_ChatMessage.Size(m)
}
func (m *ChatMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatMessage.DiscardUnknown(m)
}

var xxx_messageInfo_ChatMessage proto.InternalMessageInfo

func (m *ChatMessage) GetTimestamp() *timestamp.Timestamp {
	if m != nil {
		return m.Timestamp
	}
	return nil
}

func (m *ChatMessage) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *ChatMessage) GetText() string {
	if m != nil {
		return m.Text
	}
	return ""
}

// Wrap the messages in API specific Request/Response patterns
// Even for simple requests, for extendability later
type LoginRequest struct {
	User                 *User     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Type                 LoginType `protobuf:"varint,2,opt,name=type,proto3,enum=chat.LoginType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *LoginRequest) Reset()         { *m = LoginRequest{} }
func (m *LoginRequest) String() string { return proto.CompactTextString(m) }
func (*LoginRequest) ProtoMessage()    {}
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{2}
}

func (m *LoginRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginRequest.Unmarshal(m, b)
}
func (m *LoginRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginRequest.Marshal(b, m, deterministic)
}
func (m *LoginRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginRequest.Merge(m, src)
}
func (m *LoginRequest) XXX_Size() int {
	return xxx_messageInfo_LoginRequest.Size(m)
}
func (m *LoginRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginRequest.DiscardUnknown(m)
}

var xxx_messageInfo_LoginRequest proto.InternalMessageInfo

func (m *LoginRequest) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *LoginRequest) GetType() LoginType {
	if m != nil {
		return m.Type
	}
	return LoginType_LOGIN_UNKNOWN
}

type LoginResponse struct {
	Status               STATUS   `protobuf:"varint,1,opt,name=status,proto3,enum=chat.STATUS" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *LoginResponse) Reset()         { *m = LoginResponse{} }
func (m *LoginResponse) String() string { return proto.CompactTextString(m) }
func (*LoginResponse) ProtoMessage()    {}
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{3}
}

func (m *LoginResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LoginResponse.Unmarshal(m, b)
}
func (m *LoginResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LoginResponse.Marshal(b, m, deterministic)
}
func (m *LoginResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LoginResponse.Merge(m, src)
}
func (m *LoginResponse) XXX_Size() int {
	return xxx_messageInfo_LoginResponse.Size(m)
}
func (m *LoginResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_LoginResponse.DiscardUnknown(m)
}

var xxx_messageInfo_LoginResponse proto.InternalMessageInfo

func (m *LoginResponse) GetStatus() STATUS {
	if m != nil {
		return m.Status
	}
	return STATUS_STATUS_UNKNOWN
}

// Empty message, just give me the list yo
type UserListRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserListRequest) Reset()         { *m = UserListRequest{} }
func (m *UserListRequest) String() string { return proto.CompactTextString(m) }
func (*UserListRequest) ProtoMessage()    {}
func (*UserListRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{4}
}

func (m *UserListRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserListRequest.Unmarshal(m, b)
}
func (m *UserListRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserListRequest.Marshal(b, m, deterministic)
}
func (m *UserListRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserListRequest.Merge(m, src)
}
func (m *UserListRequest) XXX_Size() int {
	return xxx_messageInfo_UserListRequest.Size(m)
}
func (m *UserListRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserListRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserListRequest proto.InternalMessageInfo

type UserListResponse struct {
	Users                []*User  `protobuf:"bytes,1,rep,name=users,proto3" json:"users,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserListResponse) Reset()         { *m = UserListResponse{} }
func (m *UserListResponse) String() string { return proto.CompactTextString(m) }
func (*UserListResponse) ProtoMessage()    {}
func (*UserListResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{5}
}

func (m *UserListResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserListResponse.Unmarshal(m, b)
}
func (m *UserListResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserListResponse.Marshal(b, m, deterministic)
}
func (m *UserListResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserListResponse.Merge(m, src)
}
func (m *UserListResponse) XXX_Size() int {
	return xxx_messageInfo_UserListResponse.Size(m)
}
func (m *UserListResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserListResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserListResponse proto.InternalMessageInfo

func (m *UserListResponse) GetUsers() []*User {
	if m != nil {
		return m.Users
	}
	return nil
}

// UserUpdates will keep the client updated on who's logged in
// Another empty message, we just want to attach to the server's push
type UserUpdatesRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UserUpdatesRequest) Reset()         { *m = UserUpdatesRequest{} }
func (m *UserUpdatesRequest) String() string { return proto.CompactTextString(m) }
func (*UserUpdatesRequest) ProtoMessage()    {}
func (*UserUpdatesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{6}
}

func (m *UserUpdatesRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdatesRequest.Unmarshal(m, b)
}
func (m *UserUpdatesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdatesRequest.Marshal(b, m, deterministic)
}
func (m *UserUpdatesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdatesRequest.Merge(m, src)
}
func (m *UserUpdatesRequest) XXX_Size() int {
	return xxx_messageInfo_UserUpdatesRequest.Size(m)
}
func (m *UserUpdatesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdatesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdatesRequest proto.InternalMessageInfo

type UserUpdatesResponse struct {
	User                 *User     `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Type                 LoginType `protobuf:"varint,2,opt,name=type,proto3,enum=chat.LoginType" json:"type,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *UserUpdatesResponse) Reset()         { *m = UserUpdatesResponse{} }
func (m *UserUpdatesResponse) String() string { return proto.CompactTextString(m) }
func (*UserUpdatesResponse) ProtoMessage()    {}
func (*UserUpdatesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{7}
}

func (m *UserUpdatesResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UserUpdatesResponse.Unmarshal(m, b)
}
func (m *UserUpdatesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UserUpdatesResponse.Marshal(b, m, deterministic)
}
func (m *UserUpdatesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UserUpdatesResponse.Merge(m, src)
}
func (m *UserUpdatesResponse) XXX_Size() int {
	return xxx_messageInfo_UserUpdatesResponse.Size(m)
}
func (m *UserUpdatesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_UserUpdatesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_UserUpdatesResponse proto.InternalMessageInfo

func (m *UserUpdatesResponse) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *UserUpdatesResponse) GetType() LoginType {
	if m != nil {
		return m.Type
	}
	return LoginType_LOGIN_UNKNOWN
}

// How much history do we want?
type ChatHistoryRequest struct {
	NumMessages          int32    `protobuf:"varint,1,opt,name=num_messages,json=numMessages,proto3" json:"num_messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ChatHistoryRequest) Reset()         { *m = ChatHistoryRequest{} }
func (m *ChatHistoryRequest) String() string { return proto.CompactTextString(m) }
func (*ChatHistoryRequest) ProtoMessage()    {}
func (*ChatHistoryRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{8}
}

func (m *ChatHistoryRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatHistoryRequest.Unmarshal(m, b)
}
func (m *ChatHistoryRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatHistoryRequest.Marshal(b, m, deterministic)
}
func (m *ChatHistoryRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatHistoryRequest.Merge(m, src)
}
func (m *ChatHistoryRequest) XXX_Size() int {
	return xxx_messageInfo_ChatHistoryRequest.Size(m)
}
func (m *ChatHistoryRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatHistoryRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatHistoryRequest proto.InternalMessageInfo

func (m *ChatHistoryRequest) GetNumMessages() int32 {
	if m != nil {
		return m.NumMessages
	}
	return 0
}

type ChatHistoryResponse struct {
	Messages             []*ChatMessage `protobuf:"bytes,1,rep,name=messages,proto3" json:"messages,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *ChatHistoryResponse) Reset()         { *m = ChatHistoryResponse{} }
func (m *ChatHistoryResponse) String() string { return proto.CompactTextString(m) }
func (*ChatHistoryResponse) ProtoMessage()    {}
func (*ChatHistoryResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{9}
}

func (m *ChatHistoryResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatHistoryResponse.Unmarshal(m, b)
}
func (m *ChatHistoryResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatHistoryResponse.Marshal(b, m, deterministic)
}
func (m *ChatHistoryResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatHistoryResponse.Merge(m, src)
}
func (m *ChatHistoryResponse) XXX_Size() int {
	return xxx_messageInfo_ChatHistoryResponse.Size(m)
}
func (m *ChatHistoryResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatHistoryResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChatHistoryResponse proto.InternalMessageInfo

func (m *ChatHistoryResponse) GetMessages() []*ChatMessage {
	if m != nil {
		return m.Messages
	}
	return nil
}

// And finally our actual chat Service
type ChatRequest struct {
	Chat                 *ChatMessage `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChatRequest) Reset()         { *m = ChatRequest{} }
func (m *ChatRequest) String() string { return proto.CompactTextString(m) }
func (*ChatRequest) ProtoMessage()    {}
func (*ChatRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{10}
}

func (m *ChatRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatRequest.Unmarshal(m, b)
}
func (m *ChatRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatRequest.Marshal(b, m, deterministic)
}
func (m *ChatRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatRequest.Merge(m, src)
}
func (m *ChatRequest) XXX_Size() int {
	return xxx_messageInfo_ChatRequest.Size(m)
}
func (m *ChatRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ChatRequest proto.InternalMessageInfo

func (m *ChatRequest) GetChat() *ChatMessage {
	if m != nil {
		return m.Chat
	}
	return nil
}

type ChatResponse struct {
	Chat                 *ChatMessage `protobuf:"bytes,1,opt,name=chat,proto3" json:"chat,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ChatResponse) Reset()         { *m = ChatResponse{} }
func (m *ChatResponse) String() string { return proto.CompactTextString(m) }
func (*ChatResponse) ProtoMessage()    {}
func (*ChatResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_81911cf516b1f9f6, []int{11}
}

func (m *ChatResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ChatResponse.Unmarshal(m, b)
}
func (m *ChatResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ChatResponse.Marshal(b, m, deterministic)
}
func (m *ChatResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ChatResponse.Merge(m, src)
}
func (m *ChatResponse) XXX_Size() int {
	return xxx_messageInfo_ChatResponse.Size(m)
}
func (m *ChatResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ChatResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ChatResponse proto.InternalMessageInfo

func (m *ChatResponse) GetChat() *ChatMessage {
	if m != nil {
		return m.Chat
	}
	return nil
}

func init() {
	proto.RegisterEnum("chat.STATUS", STATUS_name, STATUS_value)
	proto.RegisterEnum("chat.LoginType", LoginType_name, LoginType_value)
	proto.RegisterType((*User)(nil), "chat.User")
	proto.RegisterType((*ChatMessage)(nil), "chat.ChatMessage")
	proto.RegisterType((*LoginRequest)(nil), "chat.LoginRequest")
	proto.RegisterType((*LoginResponse)(nil), "chat.LoginResponse")
	proto.RegisterType((*UserListRequest)(nil), "chat.UserListRequest")
	proto.RegisterType((*UserListResponse)(nil), "chat.UserListResponse")
	proto.RegisterType((*UserUpdatesRequest)(nil), "chat.UserUpdatesRequest")
	proto.RegisterType((*UserUpdatesResponse)(nil), "chat.UserUpdatesResponse")
	proto.RegisterType((*ChatHistoryRequest)(nil), "chat.ChatHistoryRequest")
	proto.RegisterType((*ChatHistoryResponse)(nil), "chat.ChatHistoryResponse")
	proto.RegisterType((*ChatRequest)(nil), "chat.ChatRequest")
	proto.RegisterType((*ChatResponse)(nil), "chat.ChatResponse")
}

func init() { proto.RegisterFile("chatpb/chatservice.proto", fileDescriptor_81911cf516b1f9f6) }

var fileDescriptor_81911cf516b1f9f6 = []byte{
	// 565 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0x5f, 0x6f, 0x12, 0x4f,
	0x14, 0x65, 0xe9, 0x42, 0xe0, 0xf2, 0x6f, 0xb9, 0xfc, 0x7e, 0x06, 0xf7, 0x41, 0xeb, 0xa8, 0x49,
	0xd3, 0xc4, 0xa5, 0xa1, 0x25, 0x9a, 0xe8, 0x4b, 0xb5, 0x69, 0x6d, 0x8a, 0x90, 0x2c, 0x10, 0x93,
	0xbe, 0x34, 0x4b, 0x1d, 0x29, 0x89, 0xcb, 0xae, 0x3b, 0xb3, 0x46, 0xe2, 0xa7, 0xf3, 0x9b, 0x99,
	0xf9, 0xb7, 0x2c, 0x15, 0x13, 0x1f, 0x7c, 0x62, 0xe7, 0xdc, 0x7b, 0xce, 0xbd, 0x77, 0xee, 0x61,
	0xa0, 0x7b, 0x7b, 0x17, 0xf0, 0x78, 0xde, 0x13, 0x3f, 0x8c, 0x26, 0xdf, 0x96, 0xb7, 0xd4, 0x8b,
	0x93, 0x88, 0x47, 0x68, 0x0b, 0xc8, 0x7d, 0xbc, 0x88, 0xa2, 0xc5, 0x17, 0xda, 0x93, 0xd8, 0x3c,
	0xfd, 0xdc, 0xe3, 0xcb, 0x90, 0x32, 0x1e, 0x84, 0xb1, 0x4a, 0x23, 0x04, 0xec, 0x19, 0xa3, 0x09,
	0xba, 0x50, 0x49, 0x19, 0x4d, 0x56, 0x41, 0x48, 0xbb, 0xd6, 0xbe, 0x75, 0x50, 0xf5, 0xb3, 0x33,
	0xf9, 0x01, 0xb5, 0x77, 0x77, 0x01, 0xff, 0x40, 0x19, 0x0b, 0x16, 0x14, 0x5f, 0x41, 0x35, 0x53,
	0x91, 0xb9, 0xb5, 0xbe, 0xeb, 0xa9, 0x3a, 0x9e, 0xa9, 0xe3, 0x4d, 0x4d, 0x86, 0xbf, 0x49, 0xc6,
	0x47, 0x60, 0x0b, 0xd1, 0x6e, 0x51, 0x92, 0xc0, 0x13, 0x2d, 0x7a, 0xa2, 0xbc, 0x2f, 0x71, 0x44,
	0xb0, 0x39, 0xfd, 0xce, 0xbb, 0x7b, 0xb2, 0x01, 0xf9, 0x4d, 0x26, 0x50, 0x1f, 0x46, 0x8b, 0xe5,
	0xca, 0xa7, 0x5f, 0x53, 0xca, 0x78, 0xa6, 0x61, 0xfd, 0x41, 0xe3, 0x29, 0xd8, 0x7c, 0x1d, 0x53,
	0x59, 0xa3, 0xd9, 0x6f, 0xa9, 0xb8, 0x54, 0x98, 0xae, 0x63, 0xea, 0xcb, 0x20, 0x19, 0x40, 0x43,
	0x8b, 0xb2, 0x38, 0x5a, 0x31, 0x8a, 0xcf, 0xa0, 0xcc, 0x78, 0xc0, 0x53, 0x26, 0x75, 0x9b, 0xfd,
	0xba, 0xe2, 0x4d, 0xa6, 0xa7, 0xd3, 0xd9, 0xc4, 0xd7, 0x31, 0xd2, 0x86, 0x96, 0xa8, 0x34, 0x5c,
	0x32, 0xae, 0xdb, 0x21, 0x27, 0xe0, 0x6c, 0x20, 0x2d, 0xb6, 0x0f, 0x25, 0xd1, 0x8a, 0xd0, 0xda,
	0xbb, 0xd7, 0xa3, 0x0a, 0x90, 0xff, 0x00, 0xc5, 0x71, 0x16, 0x7f, 0x0a, 0x38, 0x65, 0x46, 0xeb,
	0x1a, 0x3a, 0x5b, 0xa8, 0x96, 0xfb, 0x27, 0x13, 0xbf, 0x04, 0x14, 0x3b, 0x7c, 0xbf, 0x64, 0x3c,
	0x4a, 0xd6, 0xe6, 0x32, 0x9f, 0x40, 0x7d, 0x95, 0x86, 0x37, 0xa1, 0xda, 0xac, 0x1a, 0xbe, 0xe4,
	0xd7, 0x56, 0x69, 0xa8, 0x97, 0xcd, 0xc8, 0x19, 0x74, 0xb6, 0x88, 0xba, 0xa9, 0x17, 0x50, 0xc9,
	0xb1, 0xc4, 0x98, 0x6d, 0x55, 0x38, 0xe7, 0x14, 0x3f, 0x4b, 0x21, 0x27, 0xca, 0x42, 0xa6, 0xee,
	0x73, 0x90, 0xf6, 0xd4, 0x23, 0xed, 0x60, 0xca, 0x30, 0x19, 0x40, 0x5d, 0xb1, 0x74, 0xd1, 0xbf,
	0xa3, 0x1d, 0xbe, 0x81, 0xb2, 0x5a, 0x1c, 0x22, 0x34, 0xd5, 0xd7, 0xcd, 0x6c, 0x74, 0x35, 0x1a,
	0x7f, 0x1c, 0x39, 0x05, 0x6c, 0x40, 0x55, 0x63, 0xe3, 0x2b, 0xc7, 0xc2, 0x16, 0xd4, 0xf4, 0xf1,
	0xfc, 0xf4, 0x72, 0xe8, 0x14, 0x0f, 0x07, 0x50, 0xcd, 0x2e, 0x0f, 0xdb, 0xd0, 0x18, 0x8e, 0x2f,
	0x2e, 0x47, 0x39, 0x7e, 0x15, 0x4a, 0x12, 0x72, 0x2c, 0x04, 0x28, 0x0f, 0xc7, 0x17, 0xe3, 0xd9,
	0xd4, 0x29, 0xf6, 0x7f, 0x16, 0xd5, 0x88, 0x13, 0xf5, 0x2f, 0xc4, 0x3e, 0x94, 0xa4, 0x0c, 0x62,
	0x6e, 0x21, 0x7a, 0x7e, 0xb7, 0xb3, 0x85, 0xa9, 0xe9, 0x48, 0x01, 0x5f, 0x43, 0xc5, 0x98, 0x09,
	0xff, 0xdf, 0xec, 0x39, 0xe7, 0x37, 0xf7, 0xc1, 0x7d, 0x38, 0x23, 0x9f, 0x43, 0x2d, 0xe7, 0x1e,
	0xec, 0x6e, 0x12, 0xb7, 0x6d, 0xe6, 0x3e, 0xdc, 0x11, 0x31, 0x2a, 0x47, 0x16, 0x9e, 0xa9, 0x39,
	0xf4, 0xc2, 0x8d, 0xce, 0xef, 0xe6, 0x31, 0x3a, 0x3b, 0xdc, 0x41, 0x0a, 0x78, 0x0c, 0xb6, 0x08,
	0x60, 0x6e, 0x49, 0x86, 0x87, 0x79, 0xc8, 0x10, 0x0e, 0xac, 0x23, 0xeb, 0x6d, 0xe5, 0xba, 0xac,
	0xde, 0xb3, 0x79, 0x59, 0x3e, 0x24, 0xc7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff, 0x89, 0xe1, 0x59,
	0x5e, 0xe0, 0x04, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ChatServiceClient is the client API for ChatService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ChatServiceClient interface {
	// Login and Logout - Unary
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// Get a list of users - Unary
	UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error)
	// Attach to list of users - Server Streaming
	UserUpdates(ctx context.Context, in *UserUpdatesRequest, opts ...grpc.CallOption) (ChatService_UserUpdatesClient, error)
	// Load our history - Unary
	ChatHistory(ctx context.Context, in *ChatHistoryRequest, opts ...grpc.CallOption) (*ChatHistoryResponse, error)
	// Our main chat interface - BiDi Streaming
	Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error)
}

type chatServiceClient struct {
	cc *grpc.ClientConn
}

func NewChatServiceClient(cc *grpc.ClientConn) ChatServiceClient {
	return &chatServiceClient{cc}
}

func (c *chatServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UserList(ctx context.Context, in *UserListRequest, opts ...grpc.CallOption) (*UserListResponse, error) {
	out := new(UserListResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/UserList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) UserUpdates(ctx context.Context, in *UserUpdatesRequest, opts ...grpc.CallOption) (ChatService_UserUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[0], "/chat.ChatService/UserUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceUserUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type ChatService_UserUpdatesClient interface {
	Recv() (*UserUpdatesResponse, error)
	grpc.ClientStream
}

type chatServiceUserUpdatesClient struct {
	grpc.ClientStream
}

func (x *chatServiceUserUpdatesClient) Recv() (*UserUpdatesResponse, error) {
	m := new(UserUpdatesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *chatServiceClient) ChatHistory(ctx context.Context, in *ChatHistoryRequest, opts ...grpc.CallOption) (*ChatHistoryResponse, error) {
	out := new(ChatHistoryResponse)
	err := c.cc.Invoke(ctx, "/chat.ChatService/ChatHistory", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatServiceClient) Chat(ctx context.Context, opts ...grpc.CallOption) (ChatService_ChatClient, error) {
	stream, err := c.cc.NewStream(ctx, &_ChatService_serviceDesc.Streams[1], "/chat.ChatService/Chat", opts...)
	if err != nil {
		return nil, err
	}
	x := &chatServiceChatClient{stream}
	return x, nil
}

type ChatService_ChatClient interface {
	Send(*ChatRequest) error
	Recv() (*ChatResponse, error)
	grpc.ClientStream
}

type chatServiceChatClient struct {
	grpc.ClientStream
}

func (x *chatServiceChatClient) Send(m *ChatRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *chatServiceChatClient) Recv() (*ChatResponse, error) {
	m := new(ChatResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ChatServiceServer is the server API for ChatService service.
type ChatServiceServer interface {
	// Login and Logout - Unary
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// Get a list of users - Unary
	UserList(context.Context, *UserListRequest) (*UserListResponse, error)
	// Attach to list of users - Server Streaming
	UserUpdates(*UserUpdatesRequest, ChatService_UserUpdatesServer) error
	// Load our history - Unary
	ChatHistory(context.Context, *ChatHistoryRequest) (*ChatHistoryResponse, error)
	// Our main chat interface - BiDi Streaming
	Chat(ChatService_ChatServer) error
}

func RegisterChatServiceServer(s *grpc.Server, srv ChatServiceServer) {
	s.RegisterService(&_ChatService_serviceDesc, srv)
}

func _ChatService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UserList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).UserList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/UserList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).UserList(ctx, req.(*UserListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_UserUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(UserUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ChatServiceServer).UserUpdates(m, &chatServiceUserUpdatesServer{stream})
}

type ChatService_UserUpdatesServer interface {
	Send(*UserUpdatesResponse) error
	grpc.ServerStream
}

type chatServiceUserUpdatesServer struct {
	grpc.ServerStream
}

func (x *chatServiceUserUpdatesServer) Send(m *UserUpdatesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _ChatService_ChatHistory_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChatHistoryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServiceServer).ChatHistory(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/chat.ChatService/ChatHistory",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServiceServer).ChatHistory(ctx, req.(*ChatHistoryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ChatService_Chat_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChatServiceServer).Chat(&chatServiceChatServer{stream})
}

type ChatService_ChatServer interface {
	Send(*ChatResponse) error
	Recv() (*ChatRequest, error)
	grpc.ServerStream
}

type chatServiceChatServer struct {
	grpc.ServerStream
}

func (x *chatServiceChatServer) Send(m *ChatResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *chatServiceChatServer) Recv() (*ChatRequest, error) {
	m := new(ChatRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _ChatService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "chat.ChatService",
	HandlerType: (*ChatServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _ChatService_Login_Handler,
		},
		{
			MethodName: "UserList",
			Handler:    _ChatService_UserList_Handler,
		},
		{
			MethodName: "ChatHistory",
			Handler:    _ChatService_ChatHistory_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UserUpdates",
			Handler:       _ChatService_UserUpdates_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "Chat",
			Handler:       _ChatService_Chat_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "chatpb/chatservice.proto",
}
